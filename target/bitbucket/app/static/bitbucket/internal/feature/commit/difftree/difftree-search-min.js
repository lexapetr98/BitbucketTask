define("bitbucket/internal/feature/commit/difftree/difftree-search","module exports @atlassian/aui baconjs jquery lodash bitbucket/internal/feature/commit/difftree/difftree-search-input bitbucket/internal/model/path bitbucket/internal/model/path-and-line bitbucket/internal/util/bacon bitbucket/internal/util/events bitbucket/internal/util/function bitbucket/internal/util/promise bitbucket/internal/util/shortcuts".split(" "),function(v,l,w,x,y,z,A,B,C,D,E,F,G,H){function q(a,d){return{length:a.length,
indexOf:function(b,c){return d?b.indexOf(a,c):b.toLowerCase().indexOf(a.toLowerCase(),c)}}}function r(a,d){var b=d.indexOf(a);a=30<b?"..."+a.substring(b-30):a;for(var c=0,f="",e=0;c<a.length&&100>e;e++)b=d.indexOf(a,c),b=0>b?a.length:b,f+=m.default.escapeHtml(a.substring(c,b)),b<a.length&&(f+="\x3cstrong\x3e"+m.default.escapeHtml(a.substring(b,b+d.length))+"\x3c/strong\x3e"),c=b+d.length;return f}function I(a){function d(a){a.metadata.isDirectory?a.children.forEach(d):b[a.data.attr.href.substring(1)]=
a}var b={};d(a);return b}function J(a){return k.default.fromBinder(function(d){a.diffs.forEach(function(a){var b=new K.default(a.destination||a.source);(a.hunks||[]).forEach(function(a){a.segments.forEach(function(a){a.lines.forEach(function(e){d({path:b.toString(),type:a.type,lineNumber:"ADDED"===a.type?e.destination:e.source,line:e.line})})})})});d(new k.default.End);return n.default.noop})}function t(a,d,b){function c(a){a.children=a.children.filter(function(a){return a.metadata.isDirectory?c(a):
a.children&&0<a.children.length});return 0<a.children.length}a.searchTruncated=b.truncated;var f=I(a);L.default.split(J(b).filter(function(a){return 0<=d.indexOf(a.line)}),u.default.dot("path")).onValue(function(a){var b=h.default.reduce(a,function(a,b){return Math.max(a,b.lineNumber.toString().length)},0);a.forEach(function(a){var c=f[a.path];if(c){c.children=c.children||[];var e=new M.default(a.path,a.lineNumber,"ADDED"===a.type?"TO":"FROM"),g=bitbucket.internal.feature.difftree.searchTreeNode({changeType:a.type,
lineNumber:a.lineNumber.toString(),padding:b,titleContent:r(a.line.trim(),d)});c.children.push({data:{title:g,attr:{class:"jstree-search-leaf",title:a.line.trim(),href:"#"+e.toString()}},metadata:h.default.assign({},c.metadata,{path:e})})}})});c(a);b={linesMatched:h.default.reduce(a.children,function(a,b){return a+b.children.length},0),filesMatched:a.children.length,searchTruncated:a.searchTruncated};p.default.trigger("bitbucket.internal.ui.diff-view.search.result.details",null,b);return a}function g(a){this.input=
new N.default({placeholder:m.default.I18n.getText("bitbucket.web.difftree.search.placeholder")});this.caseSensitive=a;this._destroyables=[];this._destroyables.push(this.input);this._destroyables.push(p.default.chainWith(this.input.$el.closest("form")).on("submit",u.default.invoke("preventDefault")));this._destroyables.push({destroy:O.default.bind("requestDiffTreeSearch",this.focusSearch.bind(this))})}Object.defineProperty(l,"__esModule",{value:!0});var m=babelHelpers.interopRequireDefault(w),k=babelHelpers.interopRequireDefault(x),
n=babelHelpers.interopRequireDefault(y),h=babelHelpers.interopRequireDefault(z),N=babelHelpers.interopRequireDefault(A),K=babelHelpers.interopRequireDefault(B),M=babelHelpers.interopRequireDefault(C),L=babelHelpers.interopRequireDefault(D),p=babelHelpers.interopRequireDefault(E),u=babelHelpers.interopRequireDefault(F),P=babelHelpers.interopRequireDefault(G),O=babelHelpers.interopRequireDefault(H);g.prototype.register=function(a,d){var b=this,c=this.input.getInputs();return c.flatMap(function(f){if(!f)return k.default.fromArray([{data:d(),
search:f}]);var e=(0,n.default)('\x3cdiv class\x3d"difftree-search-spinner"\x3e\x3c/div\x3e').prependTo(b.input.$el),g=b.input.$el.parent().find(".search-icon");g.addClass("invisible");e=P.default.spinner(e,a(f)).always(function(){g.removeClass("invisible")});return k.default.fromPromise(e,!0).takeUntil(c).map(h.default.partial(t,n.default.extend(!0,{},d()),new q(f,b.caseSensitive))).map(function(a){return{data:a,search:f}})})};g.prototype.focusSearch=function(){this.trigger("search-focus");this.input.$el.find("input").focus()};
h.default.assign(g.prototype,p.default.createEventMixin("diffTreeSearch",{localOnly:!0}));g.prototype.destroy=function(){h.default.invokeMap(this._destroyables,"destroy")};l.default={DiffTreeSearch:g,_filterDiffTree:t,_Text:q,_decorateTitle:r};v.exports=l["default"]});
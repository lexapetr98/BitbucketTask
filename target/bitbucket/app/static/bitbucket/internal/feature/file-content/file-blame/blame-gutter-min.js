define("bitbucket/internal/feature/file-content/file-blame/blame-gutter","module exports jquery lodash bitbucket/util/events bitbucket/util/state bitbucket/internal/bbui/widget/widget bitbucket/internal/feature/file-content/diff-view-segment-types bitbucket/internal/util/css bitbucket/internal/util/object".split(" "),function(r,k,t,u,v,w,x,y,z,A){function m(a){var d=n.default.getRepository(),c=n.default.getFilePath().components.join("/");a=a.map(function(b){var a={spannedLines:b.spannedLines,filePath:c,
repository:d,commit:f.default.assign({id:b.commitHash,displayId:b.displayCommitHash},b)},e=[];e[b.lineNumber]=(0,h.default)(bitbucket.internal.feature.fileContent.fileBlameGutterDetailed(a))[0];if(1===b.spannedLines)return{commitId:b.commitHash,els:e};var p=(0,h.default)(bitbucket.internal.feature.fileContent.fileBlameGutterSpan(a))[0];e.push(p);return{commitId:b.commitHash,els:e.concat(f.default.times(b.spannedLines-2,function(){return p.cloneNode(!0)}))}});var e=h.default.extend.apply(h.default,
[[]].concat(f.default.map(a,"els")));e={byLine:e,byCommitId:{},all:f.default.compact(e)};f.default.transform(a,function(a,e){a[e.commitId]=a[e.commitId]?a[e.commitId].concat(f.default.compact(e.els)):f.default.compact(e.els)},e.byCommitId);return e}function B(a,d,c){var e=[];return c.eachLine(function(b){switch(b.lineType){case void 0:var c=a[b.lineNumber];var f=b.handles.SOURCE;break;case l.default.ADDED:c=a[b.line.destination];f=b.handles.TO;break;case l.default.REMOVED:c=d[b.line.source];f=b.handles.FROM;
break;case l.default.CONTEXT:d?(c=d[b.line.source],f=b.handles.FROM):(c=a[b.line.destination],f=b.handles.TO)}e.push([f,"blame",c])}).then(function(){return e})}function g(a,d){q.default.call(this);this._enabled=!1;this._textView=a;this._requestBlame=d;this._pendingChanges=[];var c=this;this._textView.on("change",function(a){c._pendingChanges?c._pendingChanges.push(a):c._fillForChange(a)});this._textView.addContainerClass("blame-disabled");this._textView.registerGutter("blame",{weight:0})}Object.defineProperty(k,
"__esModule",{value:!0});var h=babelHelpers.interopRequireDefault(t),f=babelHelpers.interopRequireDefault(u),C=babelHelpers.interopRequireDefault(v),n=babelHelpers.interopRequireDefault(w),q=babelHelpers.interopRequireDefault(x),l=babelHelpers.interopRequireDefault(y),D=babelHelpers.interopRequireDefault(z);babelHelpers.interopRequireDefault(A).default.inherits(g,q.default);g.prototype.setEnabled=function(a){a=!!a;if(this._enabled!==a&&(this._enabled=a,this._enabled===a)){if(a){this._textView.removeContainerClass("blame-disabled");
var d=this._fillGutter()}else this._textView.addContainerClass("blame-disabled"),d=h.default.Deferred().resolve();var c=this;d.done(function(){C.default.trigger("bitbucket.internal.feature.fileContent.fileBlameExpandedStateChanged",null,c._enabled)})}return d||h.default.Deferred().resolve()};g.prototype._addHoverBehavior=function(a){function d(a){if(a.target===this&&(a=this.getAttribute("data-commitid"),clearTimeout(k),g!==a)){b&&b();g=a;var c=e[a];if(500>c.length){c.addClass("commitid-hovered");
var d=c.removeClass.bind(c,"commitid-hovered")}else d=D.default.appendRule('.blame.bitbucket-gutter-marker[data-commitid\x3d"'+a+'"] {background-color: #F4F5F7;border-right-color: #0065FF;}');b=function(){d();b=g=null}}}function c(a){a.target===this&&b&&(k=setTimeout(function(){b&&b()},100))}var e=f.default.transform(a.byCommitId,function(a,b,c){a[c]=(0,h.default)(b)},{}),b,g,k;a.all.forEach(function(a){a.addEventListener("mouseenter",d);a.addEventListener("mouseleave",c)});this._addDestroyable(function(){b&&
b()})};g.prototype._fillForChange=function(a){var d=this;B(this._untilBlameElCache&&this._untilBlameElCache.byLine,this._sinceBlameElCache&&this._sinceBlameElCache.byLine,a).done(function(a){d._textView.operation(function(){a.forEach(function(a){a[2]&&d._textView.setGutterMarker.apply(d._textView,a)})})})};g.prototype._fillGutter=function(){if(this._gutterFilled)return h.default.Deferred().resolve();this._gutterFilled=!0;var a=this;return this._requestBlame.get().done(function(d,c){d&&(a._untilBlameElCache=
m(d),a._addHoverBehavior(a._untilBlameElCache));c&&(a._sinceBlameElCache=m(c),a._addHoverBehavior(a._sinceBlameElCache));a._textView.operation(function(){a._pendingChanges.forEach(a._fillForChange.bind(a))});a._pendingChanges=null})};k.default=g;r.exports=k["default"]});
define("bitbucket/internal/feature/repository/revision-reference-selector/revision-reference-selector","module exports @atlassian/aui jquery lodash bitbucket/util/navbuilder bitbucket/internal/model/page-state bitbucket/internal/model/repository bitbucket/internal/model/revision-reference bitbucket/internal/util/ajax bitbucket/internal/util/events bitbucket/internal/widget/searchable-selector/searchable-selector".split(" "),function(n,h,d,k,p,q,r,t,u,v,w,x){function b(a,b){return this.init.apply(this,
arguments)}Object.defineProperty(h,"__esModule",{value:!0});d=babelHelpers.interopRequireDefault(d);var e=babelHelpers.interopRequireDefault(k),f=babelHelpers.interopRequireDefault(p),l=babelHelpers.interopRequireDefault(q),z=babelHelpers.interopRequireDefault(r),A=babelHelpers.interopRequireDefault(t),c=babelHelpers.interopRequireDefault(u);k=babelHelpers.interopRequireDefault(v);var m=babelHelpers.interopRequireDefault(w),g=babelHelpers.interopRequireDefault(x);e.default.extend(b.prototype,g.default.prototype);
b.prototype._addRefTypeAndRepositoryToResults=function(a){if(a&&a.values){a=e.default.extend(!0,{},a);var b=this._getCurrentType();f.default.forEach(a.values,f.default.bind(function(a){a.type=b;a.repository||(a.repository=this.repository&&this.repository.toJSON())},this))}return a};b.prototype.defaults=e.default.extend(!0,{},g.default.prototype.defaults,{tabs:[{label:"Branches",type:c.default.type.BRANCH,url:function(){return this.getBranchesUrl()},resultsTemplate:bitbucket.internal.feature.repository.revisionReferenceSelectorBranchResults,
searchPlaceholder:d.default.I18n.getText("bitbucket.web.revisionref.selector.branch.search.placeholder")},{label:"Tags",type:c.default.type.TAG,url:function(){return this.getTagsUrl()},resultsTemplate:bitbucket.internal.feature.repository.revisionReferenceSelectorTagResults,searchPlaceholder:d.default.I18n.getText("bitbucket.web.revisionref.selector.tag.search.placeholder")},{label:"Commits",type:c.default.type.COMMIT,url:function(){return this.getCommitsUrl()},resultsTemplate:bitbucket.internal.feature.repository.revisionReferenceSelectorCommitResults,
searchPlaceholder:d.default.I18n.getText("bitbucket.web.revisionref.selector.commit.search.placeholder")}],queryParamKey:"filterText",namespace:"revision-reference-selector",itemSelectedEvent:"bitbucket.internal.feature.repository.revisionReferenceSelector.revisionRefChanged",itemUnselectedEvent:"bitbucket.internal.feature.repository.revisionReferenceSelector.revisionRefUnselected",itemDataKey:"revision-ref",statusCodeHandlers:k.default.ignore404WithinRepository(),triggerContentTemplate:bitbucket.internal.feature.repository.revisionReferenceSelectorTriggerContent,
extraClasses:"revision-reference-selector",repository:function(){return z.default.getRepository()},show:{branches:!0,tags:!0,commits:!1},dataTransform:b.prototype._addRefTypeAndRepositoryToResults,postOptionsInit:function(){this.setRepository(this._getOptionVal("repository"))},paginationContext:"revision-reference-selector"});b.prototype.init=function(a,b){g.default.prototype.init.apply(this,arguments);return this};b.prototype.setOptions=function(a){a.extraClasses&&(a.extraClasses=this.defaults.extraClasses+
" "+e.default.trim(a.extraClasses));a=e.default.extend(!0,{},this.defaults,a);var b=f.default.filter({branches:c.default.type.BRANCH.id,tags:c.default.type.TAG.id,commits:c.default.type.COMMIT.id},function(b,y){return a.show[y]});a.tabs=f.default.filter(a.tabs,function(a){return f.default.includes(b,a.type.id)});this.options=a};b.prototype._getItemFromTrigger=function(){var a=this.$trigger.find(".name");return new c.default(e.default.extend({},this._buildObjectFromElementDataAttributes(a),{displayId:a.text(),
repository:this.repository}))};b.prototype.getBranchesUrl=function(){return l.default.rest().project(this.repository.getProject()).repo(this.repository).branches().build()};b.prototype.getTagsUrl=function(){return l.default.rest().project(this.repository.getProject()).repo(this.repository).tags().build()};b.prototype.getCommitsUrl=function(){return l.default.rest().project(this.repository.getProject()).repo(this.repository).commits().build()};b.prototype.getRepository=function(){return this.repository};
b.prototype.setRepository=function(a){var b=this.repository;if(a instanceof A.default&&!a.isEqual(b)&&(this.repository=a,b)){if(b=this._getCurrentScrollable())this._emptyScrollable(b),b.init();this.clearSelection();this.dialog.hide();m.default.trigger("bitbucket.internal.feature.repository.revisionReferenceSelector.repoChanged",this,a,this._getOptionVal("context"))}};b.prototype._getCurrentType=function(){return this.tabs[this.currentTabId||0].type};b.prototype.setSelectedItem=function(a){a instanceof
c.default&&!a.isEqual(this._selectedItem)&&this._itemSelected(a)};b.prototype.clearSelection=function(){g.default.prototype.clearSelection.apply(this,arguments);m.default.trigger(this._getOptionVal("itemUnselectedEvent"),this,null,this._getOptionVal("context"))};b.prototype._itemSelected=function(a){if(a instanceof c.default)var b=a.toJSON();else b=f.default.pick(a,f.default.keys(c.default.prototype.namedAttributes)),a=new c.default(b);this._selectedItem=a;this._getOptionVal("field")&&(0,e.default)(this._getOptionVal("field")).val(b.id).trigger("change");
var d=bitbucket.internal.feature.repository.revisionReferenceSelectorTitle({ref:b});this.updateTrigger({ref:b},d);m.default.trigger(this._getOptionVal("itemSelectedEvent"),this,a,this._getOptionVal("context"))};h.default=b;n.exports=h["default"]});
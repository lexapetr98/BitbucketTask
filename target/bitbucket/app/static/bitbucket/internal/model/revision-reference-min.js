define("bitbucket/internal/model/revision-reference","module exports @atlassian/aui backbone-brace lodash bitbucket/internal/model/page-state bitbucket/internal/model/repository".split(" "),function(k,e,c,f,h,l,m){Object.defineProperty(e,"__esModule",{value:!0});c=babelHelpers.interopRequireDefault(c);f=babelHelpers.interopRequireDefault(f);var n=babelHelpers.interopRequireDefault(h),p=babelHelpers.interopRequireDefault(l);h=babelHelpers.interopRequireDefault(m);var b={TAG:{id:"tag",name:c.default.I18n.getText("bitbucket.web.revisionref.tag.name")},
BRANCH:{id:"branch",name:c.default.I18n.getText("bitbucket.web.revisionref.branch.name")},COMMIT:{id:"commit",name:c.default.I18n.getText("bitbucket.web.revisionref.commit.name")},isTag:function(a){return a&&(a===b.TAG.id||a.id===b.TAG.id||"TAG"===a)},isBranch:function(a){return a&&(a===b.BRANCH.id||a.id===b.BRANCH.id||"BRANCH"===a)},isCommit:function(a){return a&&(a===b.COMMIT.id||a.id===b.COMMIT.id)},from:function(a){if(b.isTag(a))return b.TAG;if(b.isBranch(a))return b.BRANCH;if(b.isCommit(a))return b.COMMIT;
window.console&&console.error("Unknown RevisionReference type "+a);return null}},d=f.default.Model.extend({namedAttributes:{id:"string",displayId:"string",type:b.from,isDefault:"boolean",latestCommit:"string",hash:"string",repository:h.default},initialize:function(){this.getDisplayId()||this.setDisplayId(this.getId());this.getIsDefault()||this.setIsDefault(!1);this.getRepository()||this.setRepository(p.default.getRepository())},getTypeName:function(){return this.getType().name},isDefault:function(){return this.get("isDefault")||
!1},isTag:function(){return b.isTag(this.getType())},isBranch:function(){return b.isBranch(this.getType())},isCommit:function(){return b.isCommit(this.getType())},isEqual:function(a){return a instanceof d&&this.getId()===a.getId()&&this.getType().id===a.getType().id&&(this.getRepository()&&a.getRepository()?this.getRepository().isEqual(a.getRepository()):!0)}},{fromCommit:function(a){return new d({id:a.id,displayId:a.displayId,type:b.COMMIT,isDefault:!1})},hydrateRefFromId:function(a,b,c,e){if(!n.default.isString(a))return null;
var g=/^refs\/(heads|tags)\/(.+)/,f=a.replace(g,"$2");c||(c=d.type.BRANCH,(g=a.match(g))&&"tags"===g[1]&&(c=d.type.TAG));return new d({id:a,displayId:f,type:c,isDefault:b,latestCommit:e})},hydrateDeprecated:function(a){return a.__json?new d(a.__json):new d(a.toJSON())}});d.type=b;e.default=d;k.exports=e["default"]});